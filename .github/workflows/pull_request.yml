name: Pull Request Quality Checks

on:
  pull_request:
    branches:
      - main
      - master
      - dev

jobs:
  trigger-aml-job:
    runs-on: ubuntu-latest

    steps:
    # Étape 1 : Checkout du code
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Télécharger tout le dépôt

    # Étape 2 : Lister les répertoires pour vérifier la structure
    - name: List directory contents
      run: |
        ls -R ./  # Liste récursive de tout le contenu du projet

    # Étape 3 : Connexion à Azure CLI avec le Service Principal existant
    - name: Log in to Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Étape 3.1 : Installer les dépendances Python
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  # Assurez-vous que pytest, flake8, etc. sont dans ce fichier


    # Étape 4 : Installer l'extension Azure ML CLI
    - name: Install Azure ML CLI extension
      run: |
        az extension add --name ml -y
        az configure --defaults workspace=${{ secrets.AML_WORKSPACE }} group=${{ secrets.RESOURCE_GROUP }}


    # Étape 5 : Exécuter des tests unitaires
    - name: Run Unit Tests
      run: |
        echo "Running unit tests..."
        # Placez ici votre commande pour lancer les tests (ex : pytest, npm test, etc.)
        pytest

    # Étape 6 : Vérifier le formatage du code (linting)
    - name: Run Code Linter
      run: |
        echo "Checking code quality..."
        # Exemple avec flake8 pour Python
        flake8

    # Étape 7 : Soumission du job Azure ML
    - name: Submit Azure ML job
      run: |
        az ml job create --file ./job-definition.yml \
        --resource-group ${{ secrets.RESOURCE_GROUP }} \
        --workspace-name ${{ secrets.AML_WORKSPACE }}

    - name: Placeholder
      run: |
        echo "Will add code checks here in next challenge"